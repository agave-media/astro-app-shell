---
import "./globals.css";

export interface Props {
	title: string;
}

const { title = "Coatl Race", state = "loading" } = Astro.props;
const { default: tlalocLoader } = await import(`@layout/components/tlaloc_loader.svg?raw`);
---

<!DOCTYPE html>
<html lang="es-419">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

		<!-- loads Material Icons font -->
		<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
		<!-- loads the entire Symbols Variable Font -->
		<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" rel="stylesheet" />
	</head>

	<body data-state={state} class="material-theme">
		<div id="loadingOverlay">
			<Fragment set:html={tlalocLoader} />
		</div>
		<app-shell logo="https://firebasestorage.googleapis.com/v0/b/serial-mtb-texcoco.appspot.com/o/logos%2F2cumbres_logo.jpg?alt=media&token=140c878e-6610-491e-8614-669c4862fb12">
			<slot />
		</app-shell>
	</body>
</html>
<style is:global>
	@import url("https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100;0,300;0,400;0,800;1,800&family=Overpass:wght@300;400;600;700&family=Readex+Pro:wght@200;300;400;600;700&display=swap");

	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, var(--md-surface-2) 60%);
	}
	html {
		font-family: "Readex Pro", system-ui, sans-serif;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
	}

	html,
	body {
		margin: 0;
		padding: 0;
		background-color: var(--md-surface-2);
	}

	main {
		margin: 0 16px 16px 0;
		padding: 16px;
		box-sizing: border-box;
		border-radius: 16px;
		background-color: var(--md-sys-color-surface);
		flex: 1;

		display: flex;
		flex-direction: column;
	}

	app-shell[_wideview]:not([_railopen]) main {
		margin-left: 16px;
	}

	#loadingOverlay {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: #eceef8;
		z-index: 10;

		display: flex;
		align-items: center;
		justify-content: center;
	}

	#tlalocLoader {
		height: 250px;
		width: 250px;
	}

	body[data-state="idle"] #loadingOverlay {
		display: none;
	}

	.sl-toast-stack {
		position: fixed;
		right: 16px;
		top: 16px;
		z-index: 2;
	}

	@media (max-width: 768px) {
		main {
			padding: 12px;
			margin: 0;
			border-radius: 0;
		}
	}
</style>

<script>
	import "@layout/components/app-shell/app-shell";
	import { getInstance as getSettingsInstance } from "@state/machines/settings.js";

	// Init settings machine. Use onTransition to listen to colorScheme changes.
	const settings = getSettingsInstance();
	settings.onTransition((state) => {
		const { colorScheme } = state.context;
		console.log("Layout colorScheme:", colorScheme);

		if (colorScheme === "dark") {
			document.body.classList.add("dark-theme");
			document.body.classList.remove("light-theme");
		} else if (colorScheme === "light") {
			document.body.classList.add("light-theme");
			document.body.classList.remove("dark-theme");
		}
	});

	// Attach dark-mode-toggle event listener to app-shell
	const appShell = document.querySelector("app-shell");
	appShell?.addEventListener("dark-mode-toggle", (e) => {
		const { detail } = e as CustomEvent;
		const { selected } = detail as { selected: boolean };
		console.log("selected:", selected);

		// Send SET_COLOR_SCHEME event to settings machine
		settings.send({ type: "SET_COLOR_SCHEME", colorScheme: selected ? "dark" : "light" });
	});

	// Hide loading overlay on app-shell ready
	appShell?.addEventListener("update-loading-state", () => {
		console.log("app-shell loaded...");
		document.body.dataset.state = "idle";
	});
</script>
