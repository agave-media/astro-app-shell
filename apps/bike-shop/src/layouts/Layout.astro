---
import "./globals.css";

export interface Props {
	title: string;
}

const tlalocLogo = "https://firebasestorage.googleapis.com/v0/b/serial-mtb-texcoco.appspot.com/o/logos%2Ftlaloc_ride_tuned_horizontal_transparent.png?alt=media&token=50cf46e7-23a0-43bc-985f-7f566241ed55";
const { title = "Tlaloc Ride Tuned", logo = tlalocLogo } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

		<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
	</head>

	<body class="material-theme">
		<app-shell logo={logo}>
			<slot />
		</app-shell>
	</body>
</html>
<style is:global>
	@import url("https://fonts.googleapis.com/css2?family=Overpass:wght@300;400;600;700&family=Readex+Pro:wght@300;400;600;700&display=swap");

	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, var(--md-surface-2) 60%);
	}
	html {
		font-family: "Readex Pro", system-ui, sans-serif;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
	}

	html,
	body {
		margin: 0;
		padding: 0;
		background-color: var(--md-surface-2);
	}

	main {
		margin: 0 16px 16px 0;
		padding: 16px;
		box-sizing: border-box;
		border-radius: 16px;
		max-height: calc(100vh - 64px - 16px);
		background-color: var(--md-sys-color-surface);
		flex: 1;
        
		display: flex;
		flex-direction: column;
	}
    
	@media (max-width: 768px) {
        main {
            padding: 12px;
			margin: 0;
            border-radius: 0;
            min-height: calc(100vh - 64px - 80px);
		}
	}
</style>

<script>
	import "@layout/components/app-shell/app-shell";
	import { getInstance as getSettingsInstance } from "@state/machines/settings.js";

	// Init settings machine. Use onTransition to listen to colorScheme changes.
	const settings = getSettingsInstance();
	settings.onTransition((state) => {
		const { colorScheme } = state.context;
		console.log("Layout colorScheme:", colorScheme);

		if (colorScheme === "dark") {
			document.body.classList.add("dark-theme");
			document.body.classList.remove("light-theme");
		} else if (colorScheme === "light") {
			document.body.classList.add("light-theme");
			document.body.classList.remove("dark-theme");
		}
	});

	// Attach dark-mode-toggle event listener to app-shell
	const appShell = document.querySelector("app-shell");
	appShell?.addEventListener("dark-mode-toggle", (e) => {
		const { detail } = e as CustomEvent;
		const { selected } = detail as { selected: boolean };
		console.log("selected:", selected);

		// Send SET_COLOR_SCHEME event to settings machine
		settings.send({ type: "SET_COLOR_SCHEME", colorScheme: selected ? "dark" : "light" });
	});
</script>
